#!/usr/bin/env bash
# -----------------------------------------------------------------------------
# fix-ipv6-host.sh
# Purpose: Detect "prefix-only" global IPv6 addresses (e.g. 2001:db8:...::/64)
#          and assign a proper host address inside the same prefix (default ::1).
#
# What it does:
#   - Scans non-loopback interfaces for global IPv6 addresses.
#   - If an address ends exactly with "::" (no host part) it is treated as prefix-only.
#   - Adds <prefix><HOST_SUFFIX>/<prefixlen> to that interface (default suffix "::1").
#
# Notes:
#   - Safe to run multiple times (idempotent).
#   - Does NOT make persistent changes (runtime only). Persist via your network manager.
#   - Assumes /64 prefixes for typical setups; still works generically by reusing the seen prefixlen.
#
# Options:
#   -i, --iface IFACE     Only check a specific interface (e.g., eth0).
#   -s, --suffix SUFFIX   Host suffix to add (default "::1"). Example: "::10".
#   -n, --dry-run         Show what would be done, without applying changes.
#   -v, --verbose         Verbose output.
#   -h, --help            Show help.
# -----------------------------------------------------------------------------

set -Eeuo pipefail

IFACE_FILTER=""
HOST_SUFFIX="::1"
DRY_RUN=0
VERBOSE=0

log() { echo "[$(date -u +'%F %T UTC')] $*"; }
vlog() { [[ $VERBOSE -eq 1 ]] && log "$@"; }

usage() {
  cat <<'USAGE'
Usage: fix-ipv6-host.sh [options]

Detect prefix-only global IPv6 addresses and add a host address.

Options:
  -i, --iface IFACE     Only check this interface (default: scan all non-loopback).
  -s, --suffix SUFFIX   Host suffix to add (default: ::1). Example: ::10
  -n, --dry-run         Print actions without applying changes.
  -v, --verbose         Verbose logging.
  -h, --help            Show this help.

Examples:
  fix-ipv6-host.sh
  fix-ipv6-host.sh --iface eth0 --suffix ::10
  fix-ipv6-host.sh -n -v
USAGE
}

# --- Parse args ---
while [[ $# -gt 0 ]]; do
  case "$1" in
    -i|--iface) IFACE_FILTER="$2"; shift 2 ;;
    -s|--suffix) HOST_SUFFIX="$2"; shift 2 ;;
    -n|--dry-run) DRY_RUN=1; shift ;;
    -v|--verbose) VERBOSE=1; shift ;;
    -h|--help) usage; exit 0 ;;
    *) echo "Unknown option: $1"; usage; exit 1 ;;
  esac
done

# --- Preconditions ---
command -v ip >/dev/null 2>&1 || { echo "ERROR: 'ip' command not found."; exit 1; }
if [[ ${EUID:-$(id -u)} -ne 0 && $DRY_RUN -ne 1 ]]; then
  echo "ERROR: must be run as root (or use --dry-run)."; exit 1
fi

# List candidate interfaces (non-loopback, UP)
mapfile -t IFACES < <(
  ip -o link show up | awk -F': ' '{print $2}' | awk '{print $1}' | grep -v '^lo$' \
  | { if [[ -n "$IFACE_FILTER" ]]; then grep -E "^${IFACE_FILTER}$" || true; else cat; fi; }
)

if [[ ${#IFACES[@]} -eq 0 ]]; then
  log "No UP interfaces found (excluding loopback) matching filter '${IFACE_FILTER:-*}'."
  exit 0
fi

CHANGES=0

for IFACE in "${IFACES[@]}"; do
  vlog "Scanning interface: $IFACE"

  # Get global IPv6 addresses on this iface (one per line: ADDR/PFXLEN)
  mapfile -t GADDRS < <(ip -o -6 addr show dev "$IFACE" scope global | awk '{print $4}')

  if [[ ${#GADDRS[@]} -eq 0 ]]; then
    vlog "  No global IPv6 addresses on $IFACE."
    continue
  fi

  # If there exists any non-prefix-only global address, we consider it fine.
  NON_PREFIX_ONLY_FOUND=0

  for CIDR in "${GADDRS[@]}"; do
    ADDR="${CIDR%/*}"
    PFXLEN="${CIDR#*/}"

    # Check if address ends EXACTLY with '::' (prefix-only heuristic)
    if [[ "$ADDR" =~ .*::$ ]]; then
      vlog "  Found prefix-only: $ADDR/$PFXLEN on $IFACE"

      # Compose new host address: <prefix-without-::><HOST_SUFFIX>/<PFXLEN>
      PREFIX="${ADDR%::}"
      NEWADDR="${PREFIX}${HOST_SUFFIX}"
      NEWCIDR="${NEWADDR}/${PFXLEN}"

      # Skip if NEWADDR already present
      if ip -o -6 addr show dev "$IFACE" scope global | awk '{print $4}' | grep -q -F "$NEWCIDR"; then
        log "  [$IFACE] Host address already present: $NEWCIDR (skipping)."
        continue
      fi

      if [[ $DRY_RUN -eq 1 ]]; then
        log "  [$IFACE] DRY-RUN: would add $NEWCIDR"
      else
        log "  [$IFACE] A
